name: Build And Publish (Reusable Workflow)

on:
  workflow_call:
    inputs:
      buildVersion:
        required: true
        type: string
      nugetVersion:
        required: true
        type: string
      publish:
        required: true
        type: boolean
      debug:
        required: true
        type: boolean
      
jobs:
  build:
    name: Build, Test, Upload artifacts, and Publish
    runs-on: ubuntu-latest

    env:
      solution: SmtpToRest.sln

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
          
      - name: Restore dependencies
        if: inputs.debug == false
        run: dotnet restore ${{ env.solution }}
  
      - name: Build
        if: inputs.debug == false
        run: dotnet build ${{ env.solution }} --configuration Release --no-restore -p:Platform="Any CPU" -p:TreatWarningsAsErrors=True
        env:
          BuildVersion: ${{ inputs.buildVersion }}
  
      - name: Test
        if: inputs.debug == false
        timeout-minutes: 5
        run: dotnet test ${{ env.solution }} --configuration Release --no-build --blame-crash --logger GitHubActions

      - name: Build self-contained EXE for Windows Service
        timeout-minutes: 5
        run: |
          dotnet publish ./SmtpToRest.WindowsService/SmtpToRest.WindowsService.csproj -p:Configuration=Release -p:BuildVersion=${{ inputs.buildVersion }} -p:DebugType=None -p:DebugSymbols=false -f net8.0 -o:./SmtpToRest.WindowsService/publish
          rm ./SmtpToRest.WindowsService/publish/appsettings.Development.json
    
      - name: Upload self-contained EXE as artifact
        if: inputs.debug == false
        uses: actions/upload-artifact@v4
        with:
          name: SmtpToRest.WindowsService
          path: "SmtpToRest.WindowsService/publish"

      - name: Build nuget package
        timeout-minutes: 5
        run: dotnet pack ./SmtpToRest/SmtpToRest.csproj -p:Configuration=Release -p:Version=${{ inputs.nugetVersion }} -o:./SmtpToRest/pack

      - name: Upload nupkg as artifact
        if: inputs.debug == false
        uses: actions/upload-artifact@v4
        with:
          name: Nuget-nupkgs
          path: "SmtpToRest/pack"

      - name: Push to NuGet
        if: inputs.publish && inputs.debug == false
        run: dotnet nuget push "./SmtpToRest/pack/*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Log in to Docker Hub
        if: inputs.publish
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        if: inputs.publish
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81
        with:
          images: nicolaihenriksen/smtptorest
      
      - name: Build and push Docker image
        if: inputs.publish && inputs.debug == false
        uses: docker/build-push-action@af5a7ed5ba88268d5278f7203fb52cd833f66d6e
        with:
          context: .
          file: ./SmtpToRest.Docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Zip Self-contained EXE artifact
        run: zip -j SmtpToRest.WindowsService.zip SmtpToRest.WindowsService/publish/*

      - name: Create release
        if: inputs.publish && inputs.debug == false
        uses: ncipollo/release-action@v1
        with:
          artifacts: "SmtpToRest/pack/*.nupkg,SmtpToRest.WindowsService.zip"
          tag: ${{ inputs.nugetVersion }}
          generateReleaseNotes: true
          draft: true